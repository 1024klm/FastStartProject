export const fastapiStack = {
  files: {
    'main.py': `#!/usr/bin/env python3
"""
PROJECT_NAME - FastAPI Application
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import uvicorn
from datetime import datetime

# Create FastAPI instance
app = FastAPI(
    title="PROJECT_NAME",
    description="A FastAPI application ready to ship",
    version="0.1.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure properly in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Pydantic models
class HealthResponse(BaseModel):
    status: str
    timestamp: datetime
    version: str


class ItemCreate(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


class ItemResponse(BaseModel):
    id: int
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    total: float


# Routes
@app.get("/", response_model=HealthResponse)
async def root():
    """Health check endpoint"""
    return HealthResponse(
        status="healthy",
        timestamp=datetime.now(),
        version="0.1.0"
    )


@app.get("/api/hello")
async def hello(name: Optional[str] = "World"):
    """Simple greeting endpoint"""
    return {"message": f"Hello, {name}! ðŸš€"}


@app.post("/api/items", response_model=ItemResponse)
async def create_item(item: ItemCreate):
    """Create a new item"""
    # This is where you'd save to database
    total = item.price + (item.tax or 0)
    
    return ItemResponse(
        id=1,  # Would be generated by database
        name=item.name,
        description=item.description,
        price=item.price,
        tax=item.tax,
        total=total
    )


@app.get("/api/items/{item_id}", response_model=ItemResponse)
async def get_item(item_id: int):
    """Get item by ID"""
    if item_id < 1:
        raise HTTPException(status_code=404, detail="Item not found")
    
    # This is where you'd fetch from database
    return ItemResponse(
        id=item_id,
        name="Sample Item",
        description="This is a sample item",
        price=99.99,
        tax=10.0,
        total=109.99
    )


# Run with uvicorn when called directly
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )`,
    'requirements.txt': `# Core
fastapi>=0.100.0
uvicorn[standard]>=0.23.0
pydantic>=2.0.0
pydantic-settings>=2.0.0
python-dotenv>=1.0.0

# Database (uncomment as needed)
# sqlalchemy>=2.0.0
# alembic>=1.11.0
# psycopg2-binary>=2.9.0
# asyncpg>=0.28.0

# Auth (uncomment as needed)
# python-jose[cryptography]>=3.3.0
# passlib[bcrypt]>=1.7.4
# python-multipart>=0.0.6

# Testing
pytest>=7.4.0
pytest-asyncio>=0.21.0
httpx>=0.24.0

# Development
black>=23.0.0
flake8>=6.0.0
mypy>=1.4.0
pre-commit>=3.3.0
isort>=5.12.0`,
    'pyproject.toml': `[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
asyncio_mode = "auto"

[tool.isort]
profile = "black"
line_length = 88`,
    '.env.example': `# FastAPI Configuration
DEBUG=true
LOG_LEVEL=info

# Server
HOST=0.0.0.0
PORT=8000
RELOAD=true

# Database (uncomment and configure)
# DATABASE_URL=postgresql://user:password@localhost/PROJECT_NAME

# Security
# SECRET_KEY=your-secret-key-here
# ALGORITHM=HS256
# ACCESS_TOKEN_EXPIRE_MINUTES=30

# External APIs
# API_KEY=your-api-key-here`,
    'app/__init__.py': `"""PROJECT_NAME FastAPI application"""

__version__ = "0.1.0"`,
    'app/api/__init__.py': `"""API routes package"""`,
    'app/api/v1/__init__.py': `"""API v1 routes"""`,
    'app/api/v1/endpoints.py': `"""API v1 endpoints"""

from fastapi import APIRouter, Query
from typing import List, Optional
from pydantic import BaseModel

router = APIRouter(prefix="/api/v1")


class ExampleResponse(BaseModel):
    message: str
    data: Optional[dict] = None


@router.get("/example", response_model=ExampleResponse)
async def example_endpoint(
    q: Optional[str] = Query(None, description="Query parameter")
):
    """Example API endpoint"""
    return ExampleResponse(
        message="This is an example endpoint",
        data={"query": q} if q else None
    )`,
    'app/core/__init__.py': `"""Core application components"""`,
    'app/core/config.py': `"""Application configuration"""

from pydantic_settings import BaseSettings
from typing import Optional


class Settings(BaseSettings):
    # Application
    app_name: str = "PROJECT_NAME"
    app_version: str = "0.1.0"
    debug: bool = True
    
    # Server
    host: str = "0.0.0.0"
    port: int = 8000
    reload: bool = True
    
    # Database
    database_url: Optional[str] = None
    
    # Security
    secret_key: str = "change-this-in-production"
    algorithm: str = "HS256"
    access_token_expire_minutes: int = 30
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"


settings = Settings()`,
    'app/models/__init__.py': `"""Database models"""`,
    'app/schemas/__init__.py': `"""Pydantic schemas"""`,
    'app/services/__init__.py': `"""Business logic services"""`,
    'tests/__init__.py': `"""Test package"""`,
    'tests/test_main.py': `"""Tests for main application"""

import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)


def test_health_check():
    """Test health check endpoint"""
    response = client.get("/")
    assert response.status_code == 200
    data = response.json()
    assert data["status"] == "healthy"
    assert "timestamp" in data
    assert data["version"] == "0.1.0"


def test_hello_endpoint():
    """Test hello endpoint"""
    response = client.get("/api/hello")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello, World! ðŸš€"}
    
    response = client.get("/api/hello?name=FastAPI")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello, FastAPI! ðŸš€"}


def test_create_item():
    """Test item creation"""
    item_data = {
        "name": "Test Item",
        "description": "A test item",
        "price": 99.99,
        "tax": 10.0
    }
    response = client.post("/api/items", json=item_data)
    assert response.status_code == 200
    data = response.json()
    assert data["name"] == "Test Item"
    assert data["total"] == 109.99


def test_get_item():
    """Test get item by ID"""
    response = client.get("/api/items/1")
    assert response.status_code == 200
    data = response.json()
    assert "id" in data
    assert "name" in data
    
    response = client.get("/api/items/0")
    assert response.status_code == 404`,
    'docker-compose.yml': `version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql://user:password@db/PROJECT_NAME
    volumes:
      - .:/app
    depends_on:
      - db
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=PROJECT_NAME
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  postgres_data:`,
    'Dockerfile': `FROM python:3.11-slim

WORKDIR /app

# Install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application
COPY . .

# Run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]`
  },
  gitignore: `# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/
.venv

# FastAPI
.pytest_cache/
.coverage
htmlcov/
instance/

# Environment
.env
.env.local
.env.*.local

# IDE
.vscode/
.idea/
*.swp
*.swo
*~
.spyderproject

# OS
.DS_Store
Thumbs.db

# Database
*.db
*.sqlite
*.sqlite3

# Docker
.dockerignore

# Logs
*.log
logs/

# Testing
.tox/
.hypothesis/
.mypy_cache/`,
  commands: [
    'python -m venv venv',
    'source venv/bin/activate',
    'pip install -r requirements.txt',
    'uvicorn main:app --reload'
  ]
};